<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sensor Locations Map</title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link rel="stylesheet" href="/styles.css">
    <style>
        #map {
            height: 82vh;
            width: 100%;
        }
        .info-box {
            margin-bottom: 20px;
        }
        .sensor-popup table {
            border-collapse: collapse;
            width: 100%;
        }
        .sensor-popup th, .sensor-popup td {
            padding: 5px;
            border: 1px solid #ddd;
            text-align: left;
        }
        .sensor-popup th {
            background-color: #f5f5f5;
        }
        .date-selection {
            margin: 10px auto;
            padding: 10px;
            background-color: #f8f9fa;
            border-radius: 5px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            text-align: center;
            max-width: fit-content;
            display: flex;
            align-items: center;
        }
        .date-selection input[type="date"] {
            padding: 5px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
        .date-selection button {
            padding: 5px 15px;
            margin-left: 10px;
            cursor: pointer;
        }
        .loading {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            z-index: 1000;
            background: white;
            padding: 20px;
            border-radius: 5px;
            box-shadow: 0 0 10px rgba(0,0,0,0.2);
            display: none;
        }
    </style>
</head>
<body>
    <div class="container">
        <nav class="navigation">
            <button class="nav-toggle">
                <i class="fas fa-bars"></i>
            </button>
            <div class="nav-links">
                <a href="/">
                    <i class="fas fa-home"></i> Home
                </a>
                <a href="/chart">
                    <i class="fas fa-chart-line"></i> Biểu Đồ
                </a>
                <a href="/map">
                    <i class="fas fa-map-marker-alt"></i> Bản Đồ
                </a>
                <a href="/growing-areas">
                    <i class="fas fa-seedling"></i> Vùng Trồng
                </a>
                <a href="/analysis">
                    <i class="fas fa-microscope"></i> Phân Tích
                </a>
                <a href="/devices">
                    <i class="fas fa-key"></i> API key
                </a>
                <a href="/logout">
                    <i class="fas fa-sign-out-alt"></i> Đăng xuất
                </a>
            </div>
        </nav>

        <div class="page-header">
            <h1>Vị Trí Đo</h1>
        </div>

    <div class="date-selection">
        <span>Chọn từ ngày: </span>
        <input type="date" id="fromDate" name="fromDate">
        <span>Chọn tới ngày: </span>
        <input type="date" id="toDate" name="toDate">
        <button type="button" id="showData">Lọc dữ liệu</button>
    </div>

    <div id="map"></div>
    <div id="loading" class="loading">Loading data...</div>

    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <script>
        // Initialize the map
        const map = L.map('map').setView([10.8231, 106.6297], 13); // Default view of Vietnam
        let markers = []; // Store markers for later removal

        // Add OpenStreetMap tiles
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            maxZoom: 19,
            attribution: '© OpenStreetMap contributors'
        }).addTo(map);

        function clearMarkers() {
            markers.forEach(marker => {
                map.removeLayer(marker.marker);
                map.removeLayer(marker.circle);
            });
            markers = [];
        }

        function loadMapData(useFilters = false) {
            // Show loading indicator
            document.getElementById('loading').style.display = 'block';

            // Clear existing markers
            clearMarkers();

            // Build URL based on whether we're using filters
            let url = '/api/data/map';
            if (useFilters) {
                const fromDate = document.getElementById('fromDate').value;
                const toDate = document.getElementById('toDate').value;
                
                if (!fromDate || !toDate) {
                    alert('Please select both dates');
                    document.getElementById('loading').style.display = 'none';
                    return;
                }
                url += `?fromDate=${fromDate}&toDate=${toDate}`;
            }

            // Fetch data from API
            fetch(url)
                .then(response => response.json())
                .then(points => {
                    if (points && points.length > 0) {
                        const bounds = L.latLngBounds();

                        points.forEach((point, index) => {
                            if (point && point.latitude && point.longitude) {
                                const { latitude, longitude, location = 'Unknown', formatted_timestamp, temperature, humidity, ph, conductivity, nitrogen, phosphorus, potassium, circleColor = '#0000ff' } = point;

                                // Create popup content with sensor data
                                const popupContent = `
                                    <div class="sensor-popup">
                                        <h3>Sensor Data</h3>
                                        <table>
                                            <tr><th>Location:</th><td>${location}</td></tr>
                                            <tr><th>Time:</th><td>${formatted_timestamp}</td></tr>
                                            <tr><th>Temperature:</th><td>${temperature}°C</td></tr>
                                            <tr><th>Humidity:</th><td>${humidity}%</td></tr>
                                            <tr><th>pH:</th><td>${ph}</td></tr>
                                            <tr><th>Conductivity:</th><td>${conductivity}</td></tr>
                                            <tr><th>Nitrogen:</th><td>${nitrogen}</td></tr>
                                            <tr><th>Phosphorus:</th><td>${phosphorus}</td></tr>
                                            <tr><th>Potassium:</th><td>${potassium}</td></tr>
                                        </table>
                                        <label for="circleColor-${index}">Circle Color:</label>
                                        <input type="color" id="circleColor-${index}" name="circleColor" value="${circleColor}">
                                    </div>
                                `;

                                const marker = L.marker([latitude, longitude]).bindPopup(popupContent).addTo(map);
                                const circleMarker = L.circleMarker([latitude, longitude], {
                                    color: circleColor,
                                    fillColor: circleColor,
                                    fillOpacity: 0.5,
                                    radius: 10
                                }).addTo(map);

                                bounds.extend([latitude, longitude]);

                                markers.push({
                                    marker: marker,
                                    circle: circleMarker
                                });

                                marker.on('popupopen', function() {
                                    const colorInput = document.getElementById(`circleColor-${index}`);
                                    colorInput.addEventListener('input', function() {
                                        const newColor = colorInput.value;
                                        circleMarker.setStyle({ color: newColor, fillColor: newColor });
                                    });
                                });
                            }
                        });

                        // Fit the map to the bounds of all markers
                        map.fitBounds(bounds);
                    }
                })
                .catch(error => {
                    console.error('Error loading map data:', error);
                })
                .finally(() => {
                    // Hide loading indicator
                    document.getElementById('loading').style.display = 'none';
                });
        }

        // Set default dates (30 days ago to today)
        function setDefaultDates() {
            const today = new Date();
            const thirtyDaysAgo = new Date(today);
            thirtyDaysAgo.setDate(today.getDate() - 30);

            document.getElementById('fromDate').value = thirtyDaysAgo.toISOString().split('T')[0];
            document.getElementById('toDate').value = today.toISOString().split('T')[0];
            
            // Load initial data without filters
            loadMapData(false);
        }

        setDefaultDates();

        // Handle show data button click - now uses filters
        document.getElementById('showData').addEventListener('click', () => loadMapData(true));
    </script>
</body>
</html>
