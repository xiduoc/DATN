<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sensor Locations Map</title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <link rel="stylesheet" href="/styles.css">
    <style>
        #map {
            height: 82vh;
            width: 100%;
        }
        .info-box {
            margin-bottom: 20px;
        }
        .sensor-popup table {
            border-collapse: collapse;
            width: 100%;
        }
        .sensor-popup th, .sensor-popup td {
            padding: 5px;
            border: 1px solid #ddd;
            text-align: left;
        }
        .sensor-popup th {
            background-color: #f5f5f5;
        }
    </style>
</head>
<body>
    <div class="info-box">
        <!-- Navigation Links -->
        <nav class="navigation">
            <a href="/">Home</a>
            <a href="/chart">Charts</a>
            <a href="/map">Map</a>
            <a href="/growing-areas">Growing Areas</a>
            <a href="/devices">Devices and API Key</a>
            <a href="/logout" style="color: #c74b58;">Logout</a>
        </nav>
    </div>

    <h1>Locations Map</h1>

    <div id="map"></div>

    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <script>
        // Initialize the map
        const map = L.map('map').setView([10.8231, 106.6297], 13); // Default view of Vietnam

        // Add OpenStreetMap tiles
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            maxZoom: 19,
            attribution: '© OpenStreetMap contributors'
        }).addTo(map);

        // Add markers for each point
        const points = JSON.parse('<%- JSON.stringify(points || []) %>');
        
        // Create a bounds object to fit all markers
        const bounds = L.latLngBounds();

        points.forEach((point, index) => {
            if (point && point.latitude && point.longitude) {
                const { latitude, longitude, location = 'Unknown', formatted_timestamp, temperature, humidity, ph, conductivity, nitrogen, phosphorus, potassium, circleColor = '#0000ff' } = point;

                // Create popup content with sensor data
                const popupContent = `
                    <div class="sensor-popup">
                        <h3>Sensor Data</h3>
                        <table>
                            <tr><th>Location:</th><td>${location}</td></tr>
                            <tr><th>Time:</th><td>${formatted_timestamp}</td></tr>
                            <tr><th>Temperature:</th><td>${temperature}°C</td></tr>
                            <tr><th>Humidity:</th><td>${humidity}%</td></tr>
                            <tr><th>pH:</th><td>${ph}</td></tr>
                            <tr><th>Conductivity:</th><td>${conductivity}</td></tr>
                            <tr><th>Nitrogen:</th><td>${nitrogen}</td></tr>
                            <tr><th>Phosphorus:</th><td>${phosphorus}</td></tr>
                            <tr><th>Potassium:</th><td>${potassium}</td></tr>
                        </table>
                        <label for="circleColor-${index}">Circle Color:</label>
                        <input type="color" id="circleColor-${index}" name="circleColor" value="${circleColor}">
                    </div>
                `;

                const marker = L.marker([latitude, longitude]).bindPopup(popupContent).addTo(map);
                const circleMarker = L.circleMarker([latitude, longitude], {
                    color: circleColor,
                    fillColor: circleColor,
                    fillOpacity: 0.5,
                    radius: 10
                }).addTo(map);

                bounds.extend([latitude, longitude]);

                marker.on('popupopen', function() {
                    const colorInput = document.getElementById(`circleColor-${index}`);
                    colorInput.addEventListener('input', function() {
                        const newColor = colorInput.value;
                        circleMarker.setStyle({ color: newColor, fillColor: newColor });
                    });
                });
            }
        });

        // Fit the map to the bounds of all markers if there are any points
        if (points.length > 0) {
            map.fitBounds(bounds);
        }
    </script>
</body>
</html>
